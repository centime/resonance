// Generated by CoffeeScript 1.4.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.app.controller("MessagesController", function($scope) {
    var elmt, scrollDown;
    $scope.messages = [];
    $scope.newMessage = '';
    $scope.currentnick = '';
    self.port.on("messagesHistory", function(messagesHistory) {
      var message;
      $scope.messages = (function() {
        var _i, _len, _ref, _results;
        _results = [];
        for (_i = 0, _len = messagesHistory.length; _i < _len; _i++) {
          message = messagesHistory[_i];
          _results.push({
            'author': message.author,
            'message': message.message,
            'old': message.old,
            'display': !(_ref = message.author, __indexOf.call($scope.$parent.mutedUsers, _ref) >= 0)
          });
        }
        return _results;
      })();
      $scope.$apply();
      return scrollDown();
    });
    self.port.on("nick", function(currentnick) {
      $scope.currentnick = currentnick;
      return scrollDown();
    });
    $scope.submitNewMessage = function() {
      var msg;
      msg = $scope.newMessage;
      if (msg !== '') {
        self.port.emit('say', IRC.chan, msg);
      }
      return $scope.newMessage = '';
    };
    self.port.on("message", function(from, to, message) {
      var entry, wordsInMessage, _ref;
      entry = {
        'author': from,
        'message': message,
        'display': !(__indexOf.call($scope.$parent.mutedUsers, from) >= 0),
        'marker': 'standart'
      };
      wordsInMessage = entry.message.split(new RegExp(' |:', 'g'));
      if (entry.author === 'resonance-bot') {
        entry.marker = 'resonanceToMe';
      } else if (entry.author === $scope.currentnick) {
        entry.marker = 'authorIsMe';
      } else if (_ref = $scope.currentnick, __indexOf.call(wordsInMessage, _ref) >= 0) {
        entry.marker = 'authorToMe';
      }
      $scope.messages.push(entry);
      $scope.$apply();
      return scrollDown();
    });
    $scope["class"] = function(message) {
      var classes, _ref;
      if ((_ref = message.marker) == null) {
        message.marker = '';
      }
      classes = {
        'old_message_resonance': message.old
      };
      switch (message.marker) {
        case 'resonanceToMe':
          classes['resonanceToMe_resonance'] = true;
          break;
        case 'authorIsMe':
          classes['authorIsMe_resonance'] = true;
          break;
        case 'authorToMe':
          classes['authorToMe_resonance'] = true;
      }
      return classes;
    };
    $scope.$parent.$on("mute", function(e, user) {
      var message, _i, _len, _ref, _results;
      _ref = $scope.messages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        message = _ref[_i];
        if (message.author === user) {
          _results.push(message.display = false);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
    $scope.$parent.$on("unMute", function(e, user) {
      var message, _i, _len, _ref, _results;
      _ref = $scope.messages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        message = _ref[_i];
        if (message.author === user) {
          _results.push(message.display = true);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
    $scope.displayMessages = function(displayMessages) {
      angular.element('messages_resonance input').focus();
      return displayMessages;
    };
    elmt = angular.element('messages_resonance > ul');
    return scrollDown = function() {
      return elmt.animate({
        scrollTop: elmt.prop('scrollHeight')
      }, 1000);
    };
  });

}).call(this);
