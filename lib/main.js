// Generated by CoffeeScript 1.6.2
(function() {
  var URL, channelsToWorkers, client, currentNick, data, irc, passEvent, sha1, storage, tabToPreviousPage, tabs, widgets, _ref,
    __hasProp = {}.hasOwnProperty;

  widgets = require("sdk/widget");

  URL = require('sdk/url').URL;

  tabs = require('sdk/tabs');

  data = require("sdk/self").data;

  storage = require("sdk/simple-storage").storage;

  sha1 = require('./sha1.js').sha1;

  irc = require('./bundle');

  currentNick = (_ref = storage.nick) != null ? _ref : 'Resonance-dev';

  client = new irc.Client('chat.freenode.net', currentNick, {
    debug: false
  });

  client.addListener('message', function(from, to, message) {
    if (to !== currentNick) {
      return channelsToWorkers[to].port.emit('message', from, to, message);
    }
  });

  client.addListener('pm', function(from, message) {
    var chan, worker, _results, _results1, _results2;

    if (from === 'Resonance-bot' && message.match(/^announce /)) {
      message = message.replace('announce ', '');
      _results = [];
      for (chan in channelsToWorkers) {
        if (!__hasProp.call(channelsToWorkers, chan)) continue;
        worker = channelsToWorkers[chan];
        _results.push(worker.port.emit('announce', message));
      }
      return _results;
    } else if (from === 'Resonance-bot' && message.match(/^topPages /)) {
      message = message.replace('topPages ', '');
      _results1 = [];
      for (chan in channelsToWorkers) {
        if (!__hasProp.call(channelsToWorkers, chan)) continue;
        worker = channelsToWorkers[chan];
        _results1.push(worker.port.emit('topPages', message));
      }
      return _results1;
    } else {
      _results2 = [];
      for (chan in channelsToWorkers) {
        if (!__hasProp.call(channelsToWorkers, chan)) continue;
        worker = channelsToWorkers[chan];
        _results2.push(worker.port.emit('pm', from, message));
      }
      return _results2;
    }
  });

  client.addListener('part', function(chan, nick) {
    if (nick !== currentNick) {
      return channelsToWorkers[chan].port.emit('part', chan, nick);
    }
  });

  passEvent = function(eventName) {
    return client.addListener(eventName, function(chan, a, b, c, d, e, f, g, h, i) {
      if (channelsToWorkers[chan] != null) {
        return channelsToWorkers[chan].port.emit(eventName, chan, a, b, c, d, e, f, g, h, i);
      }
    });
  };

  passEvent('names');

  passEvent('join');

  tabToPreviousPage = [];

  channelsToWorkers = {};

  tabs.on('ready', function(tab) {
    var chan, currentTab, i, worker, _ref1;

    currentTab = -1;
    i = 0;
    while (i < tabs.length) {
      if (tab === tabs[i]) {
        currentTab = i;
      }
      i++;
    }
    if (tabToPreviousPage[currentTab] != null) {
      client.part(tabToPreviousPage[currentTab].chan);
      delete channelsToWorkers[tabToPreviousPage[currentTab].chan];
    }
    chan = '#' + sha1(tab.url.host + tab.title).toString();
    client.join(chan);
    client.say('Resonance-bot', 'enter ' + tab.url + ' ' + chan);
    tabToPreviousPage[currentTab] = {
      'url': tab.url,
      'chan': chan
    };
    worker = tab.attach({
      contentScriptFile: [data.url("lib/jquery.js"), data.url("lib/angular.min.js"), data.url("content-built.js"), data.url("controllers/app.js"), data.url("controllers/ResonanceController.js"), data.url("controllers/IrcController.js"), data.url("controllers/MessagesController.js"), data.url("controllers/UsersController.js"), data.url("controllers/TopPagesController.js"), data.url("controllers/SettingsController.js"), data.url("controllers/PrivateMessagesController.js"), data.url("controllers/PrivateUsersController.js")]
    });
    channelsToWorkers[chan] = worker;
    worker.port.emit('appSize', (_ref1 = storage.appSize) != null ? _ref1 : '100');
    worker.port.emit('chan', chan);
    worker.port.emit('nick', currentNick);
    worker.port.on('say', function(to, text) {
      client.say(to, text);
      return worker.port.emit('message', currentNick, to, text);
    });
    worker.port.on('getTopPages', function() {
      return client.say('Resonance-bot', 'ask');
    });
    worker.port.on("newNick", function(nick) {
      storage.nick = nick;
      currentNick = nick;
      return worker.port.emit('message', 'Resonance', currentNick, 'Your new nick will be saved and available as soon as you restart firefox.');
    });
    return worker.port.on("newAppSize", function(height) {
      return storage.appSize = height;
    });
  });

  tabs.on('close', function(tab) {
    var chan;

    chan = '#' + sha1(tab.url.host + tab.title).toString();
    client.part(chan);
    delete tabToPreviousPage[tab];
    return delete channelsToWorkers[chan];
  });

}).call(this);
